/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.5.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.CryptoSnapshot = factory(root.intrinioSDK.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The CryptoSnapshot model module.
   * @module model/CryptoSnapshot
   * @version 2.2.0
   */

  /**
   * Constructs a new <code>CryptoSnapshot</code>.
   * A snapshot is a point in time look at the given Crypto Currency Pair on the given Crypto Currency Exchange. The snapshot includes information from the last 24 hours such as bid price, bid size, ask price, ask size, notional change in price, percent change in price, volume, open price, high price, low price, and details of the last trade (price, time, size, and side).
   * @alias module:model/CryptoSnapshot
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>CryptoSnapshot</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CryptoSnapshot} obj Optional instance to populate.
   * @return {module:model/CryptoSnapshot} The populated <code>CryptoSnapshot</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('last_updated')) {
        obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'String');
      }
      if (data.hasOwnProperty('bid')) {
        obj['bid'] = ApiClient.convertToType(data['bid'], 'Number');
      }
      if (data.hasOwnProperty('bid_size')) {
        obj['bid_size'] = ApiClient.convertToType(data['bid_size'], 'Number');
      }
      if (data.hasOwnProperty('ask')) {
        obj['ask'] = ApiClient.convertToType(data['ask'], 'Number');
      }
      if (data.hasOwnProperty('ask_size')) {
        obj['ask_size'] = ApiClient.convertToType(data['ask_size'], 'Number');
      }
      if (data.hasOwnProperty('change')) {
        obj['change'] = ApiClient.convertToType(data['change'], 'Number');
      }
      if (data.hasOwnProperty('change_percent')) {
        obj['change_percent'] = ApiClient.convertToType(data['change_percent'], 'Number');
      }
      if (data.hasOwnProperty('volume')) {
        obj['volume'] = ApiClient.convertToType(data['volume'], 'Number');
      }
      if (data.hasOwnProperty('open')) {
        obj['open'] = ApiClient.convertToType(data['open'], 'Number');
      }
      if (data.hasOwnProperty('high')) {
        obj['high'] = ApiClient.convertToType(data['high'], 'Number');
      }
      if (data.hasOwnProperty('low')) {
        obj['low'] = ApiClient.convertToType(data['low'], 'Number');
      }
      if (data.hasOwnProperty('last_trade_side')) {
        obj['last_trade_side'] = ApiClient.convertToType(data['last_trade_side'], 'String');
      }
      if (data.hasOwnProperty('last_trade_time')) {
        obj['last_trade_time'] = ApiClient.convertToType(data['last_trade_time'], 'String');
      }
      if (data.hasOwnProperty('last_trade_price')) {
        obj['last_trade_price'] = ApiClient.convertToType(data['last_trade_price'], 'Number');
      }
      if (data.hasOwnProperty('last_trade_size')) {
        obj['last_trade_size'] = ApiClient.convertToType(data['last_trade_size'], 'Number');
      }
    }
    return obj;
  }

  /**
   * UTC timestamp of when the snapshot was last updated.
   * @member {String} last_updated
   */
  exports.prototype['last_updated'] = undefined;
  /**
   * The bid for the Crypto Currency Pair on the exchange.
   * @member {Number} bid
   */
  exports.prototype['bid'] = undefined;
  /**
   * The size of the bid for the Crypto Currency Pair on the exchange.
   * @member {Number} bid_size
   */
  exports.prototype['bid_size'] = undefined;
  /**
   * The ask for the Crypto Currency Pair on the exchange.
   * @member {Number} ask
   */
  exports.prototype['ask'] = undefined;
  /**
   * The size of the ask for the Crypto Currency Pair on the exchange.
   * @member {Number} ask_size
   */
  exports.prototype['ask_size'] = undefined;
  /**
   * The notional change in price over the last 24 hours.
   * @member {Number} change
   */
  exports.prototype['change'] = undefined;
  /**
   * The percent change in price over the last 24 hours.
   * @member {Number} change_percent
   */
  exports.prototype['change_percent'] = undefined;
  /**
   * The volume of the Crypto Currency Pair on the exchange.
   * @member {Number} volume
   */
  exports.prototype['volume'] = undefined;
  /**
   * The opening price of the currency on the exchange.
   * @member {Number} open
   */
  exports.prototype['open'] = undefined;
  /**
   * The highest price of the currency on the exchange for the last 24 hours.
   * @member {Number} high
   */
  exports.prototype['high'] = undefined;
  /**
   * The lowest price of the currency on the exchange for the last 24 hours.
   * @member {Number} low
   */
  exports.prototype['low'] = undefined;
  /**
   * The side of the last trade, either buy or sell.
   * @member {String} last_trade_side
   */
  exports.prototype['last_trade_side'] = undefined;
  /**
   * UTC timestamp of the last trade for the Crypto Currency Pair on the exchange.
   * @member {String} last_trade_time
   */
  exports.prototype['last_trade_time'] = undefined;
  /**
   * The price of the last trade for the Crypto Currency Pair on the exchange.
   * @member {Number} last_trade_price
   */
  exports.prototype['last_trade_price'] = undefined;
  /**
   * The size of the last trade for the Crypto Currency Pair on the exchange.
   * @member {Number} last_trade_size
   */
  exports.prototype['last_trade_size'] = undefined;



  return exports;
}));


