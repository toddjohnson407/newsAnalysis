/**
 * Intrinio API
 * Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.5.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiResponseCryptoBook', 'model/ApiResponseCryptoBookAsks', 'model/ApiResponseCryptoBookBids', 'model/ApiResponseCryptoCurrencies', 'model/ApiResponseCryptoExchanges', 'model/ApiResponseCryptoPairs', 'model/ApiResponseCryptoPrices', 'model/ApiResponseCryptoSnapshot', 'model/ApiResponseCryptoStats'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiResponseCryptoBook'), require('../model/ApiResponseCryptoBookAsks'), require('../model/ApiResponseCryptoBookBids'), require('../model/ApiResponseCryptoCurrencies'), require('../model/ApiResponseCryptoExchanges'), require('../model/ApiResponseCryptoPairs'), require('../model/ApiResponseCryptoPrices'), require('../model/ApiResponseCryptoSnapshot'), require('../model/ApiResponseCryptoStats'));
  } else {
    // Browser globals (root is window)
    if (!root.intrinioSDK) {
      root.intrinioSDK = {};
    }
    root.intrinioSDK.CryptoApi = factory(root.intrinioSDK.ApiClient, root.intrinioSDK.ApiResponseCryptoBook, root.intrinioSDK.ApiResponseCryptoBookAsks, root.intrinioSDK.ApiResponseCryptoBookBids, root.intrinioSDK.ApiResponseCryptoCurrencies, root.intrinioSDK.ApiResponseCryptoExchanges, root.intrinioSDK.ApiResponseCryptoPairs, root.intrinioSDK.ApiResponseCryptoPrices, root.intrinioSDK.ApiResponseCryptoSnapshot, root.intrinioSDK.ApiResponseCryptoStats);
  }
}(this, function(ApiClient, ApiResponseCryptoBook, ApiResponseCryptoBookAsks, ApiResponseCryptoBookBids, ApiResponseCryptoCurrencies, ApiResponseCryptoExchanges, ApiResponseCryptoPairs, ApiResponseCryptoPrices, ApiResponseCryptoSnapshot, ApiResponseCryptoStats) {
  'use strict';

  /**
   * Crypto service.
   * @module api/CryptoApi
   * @version 2.2.0
   */

  /**
   * Constructs a new CryptoApi. 
   * @alias module:api/CryptoApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Crypto Book Asks
     * Returns the entire ask order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book asks for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book asks for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book asks for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBookAsks} and HTTP response
     */
    this.getCryptoBookAsksWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBookAsks;

      return this.apiClient.callApi(
        '/crypto/book/asks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Book Asks
     * Returns the entire ask order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book asks for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book asks for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book asks for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBookAsks}
     */
    this.getCryptoBookAsks = function(opts) {
      return this.getCryptoBookAsksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Book Bids
     * Returns the entire bid order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book bids for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book bids for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book bids for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBookBids} and HTTP response
     */
    this.getCryptoBookBidsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBookBids;

      return this.apiClient.callApi(
        '/crypto/book/bids', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Book Bids
     * Returns the entire bid order book for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the order book bids for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book bids for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book bids for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBookBids}
     */
    this.getCryptoBookBids = function(opts) {
      return this.getCryptoBookBidsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Book Summary
     * Returns the order book summary (bid/ask prices and size) for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels The number of prices/levels to return on each side. For example, the max of 50 levels will return up to 50 bid prices and 50 ask prices.
     * @param {String} opts.pair Return the order book summary for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book summary for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book summary for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoBook} and HTTP response
     */
    this.getCryptoBookSummaryWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'levels': opts['levels'],
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoBook;

      return this.apiClient.callApi(
        '/crypto/book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Book Summary
     * Returns the order book summary (bid/ask prices and size) for a given Crypto Currency Pair and Crypto Exchange.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.levels The number of prices/levels to return on each side. For example, the max of 50 levels will return up to 50 bid prices and 50 ask prices.
     * @param {String} opts.pair Return the order book summary for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the order book summary for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the order book summary for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoBook}
     */
    this.getCryptoBookSummary = function(opts) {
      return this.getCryptoBookSummaryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Currencies
     * Returns a list of Crypto Currencies for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns Crypto Currencies traded on the given Crypto Exchange.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoCurrencies} and HTTP response
     */
    this.getCryptoCurrenciesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoCurrencies;

      return this.apiClient.callApi(
        '/crypto/currencies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Currencies
     * Returns a list of Crypto Currencies for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns Crypto Currencies traded on the given Crypto Exchange.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoCurrencies}
     */
    this.getCryptoCurrencies = function(opts) {
      return this.getCryptoCurrenciesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Exchanges
     * Returns a list of Crypto Exchanges for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Returns Crypto Currencies traded on the given Crypto Exchange.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoExchanges} and HTTP response
     */
    this.getCryptoExchangesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoExchanges;

      return this.apiClient.callApi(
        '/crypto/exchanges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Exchanges
     * Returns a list of Crypto Exchanges for which prices are available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Returns Crypto Currencies traded on the given Crypto Exchange.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoExchanges}
     */
    this.getCryptoExchanges = function(opts) {
      return this.getCryptoExchangesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Pairs
     * Returns a list of Crypto Currency Pairs for which data is available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Return pairs traded on the given Crypto Exchange.
     * @param {String} opts.currency Return pairs with one side being the given Crypto Currency.
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoPairs} and HTTP response
     */
    this.getCryptoPairsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoPairs;

      return this.apiClient.callApi(
        '/crypto/pairs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Pairs
     * Returns a list of Crypto Currency Pairs for which data is available.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Return pairs traded on the given Crypto Exchange.
     * @param {String} opts.currency Return pairs with one side being the given Crypto Currency.
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoPairs}
     */
    this.getCryptoPairs = function(opts) {
      return this.getCryptoPairsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Prices
     * Returns a list of available Crypto Currency Prices.
     * @param {module:model/String} timeframe The time interval for the prices.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return prices for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return prices for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return prices for the given Crypto Currency.
     * @param {module:model/String} opts.timezone Return price date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {String} opts.startDate Return Crypto Prices on or after this date.
     * @param {String} opts.startTime Return Crypto Prices at or after this time (24-hour).
     * @param {String} opts.endDate Return Crypto Prices on or before this date.
     * @param {String} opts.endTime Return Crypto Prices at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoPrices} and HTTP response
     */
    this.getCryptoPricesWithHttpInfo = function(timeframe, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'timeframe' is set
      if (timeframe === undefined || timeframe === null) {
        throw new Error("Missing the required parameter 'timeframe' when calling getCryptoPrices");
      }


      var pathParams = {
        'timeframe': timeframe
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
        'timezone': opts['timezone'],
        'start_date': opts['startDate'],
        'start_time': opts['startTime'],
        'end_date': opts['endDate'],
        'end_time': opts['endTime'],
        'page_size': opts['pageSize'],
        'next_page': opts['nextPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoPrices;

      return this.apiClient.callApi(
        '/crypto/prices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Prices
     * Returns a list of available Crypto Currency Prices.
     * @param {module:model/String} timeframe The time interval for the prices.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return prices for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return prices for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return prices for the given Crypto Currency.
     * @param {module:model/String} opts.timezone Return price date/times in this timezone, also interpret start/end date/time parameters in this timezone. (default to UTC)
     * @param {String} opts.startDate Return Crypto Prices on or after this date.
     * @param {String} opts.startTime Return Crypto Prices at or after this time (24-hour).
     * @param {String} opts.endDate Return Crypto Prices on or before this date.
     * @param {String} opts.endTime Return Crypto Prices at or before this time (24-hour).
     * @param {Number} opts.pageSize An integer greater than or equal to 1 for specifying the number of results on each page. (default to 100)
     * @param {String} opts.nextPage Gets the next page of data from a previous API call
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoPrices}
     */
    this.getCryptoPrices = function(timeframe, opts) {
      return this.getCryptoPricesWithHttpInfo(timeframe, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Snapshot
     * Returns a market snapshot over that last 24 hours for the given currency pair and exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the snapshot for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the snapshot for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the snapshot for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoSnapshot} and HTTP response
     */
    this.getCryptoSnapshotWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'pair': opts['pair'],
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoSnapshot;

      return this.apiClient.callApi(
        '/crypto/snapshot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Snapshot
     * Returns a market snapshot over that last 24 hours for the given currency pair and exchange.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Return the snapshot for the given Crypto Currency Pair.
     * @param {String} opts.exchange Return the snapshot for a Crypto Currency on the given Crypto Exchange.
     * @param {String} opts.currency Return the snapshot for the given Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoSnapshot}
     */
    this.getCryptoSnapshot = function(opts) {
      return this.getCryptoSnapshotWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Crypto Stats
     * Returns available stats on Crypto Currencies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns stats for Crypto Currencies that trade on the specified Crypto Exchange.
     * @param {String} opts.currency Returns stats for the specified Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseCryptoStats} and HTTP response
     */
    this.getCryptoStatsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exchange': opts['exchange'],
        'currency': opts['currency'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ApiResponseCryptoStats;

      return this.apiClient.callApi(
        '/crypto/stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Crypto Stats
     * Returns available stats on Crypto Currencies.
     * @param {Object} opts Optional parameters
     * @param {String} opts.exchange Returns stats for Crypto Currencies that trade on the specified Crypto Exchange.
     * @param {String} opts.currency Returns stats for the specified Crypto Currency.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseCryptoStats}
     */
    this.getCryptoStats = function(opts) {
      return this.getCryptoStatsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
